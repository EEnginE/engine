cmake_minimum_required(VERSION 2.8.7)

project(engine)


# START uninstall
configure_file("${CMAKE_HOME_DIRECTORY}/generate/cmake/cmake_uninstall.cmake.in"
               "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
               IMMEDIATE @ONLY)

add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
# STOP uninstall

set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_HOME_DIRECTORY}/generate/cmake )


# Only set CMAKE_BUILD_TYPE when not defined
if( "${CMAKE_BUILD_TYPE}" MATCHES "" )
   set( CMAKE_BUILD_TYPE DEBUG )
endif( "${CMAKE_BUILD_TYPE}" MATCHES "" )

# Set the output directory of the libraries and executables after the build process
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)


###  Choose the low level graphic API  #################################################################################################

include( ${CMAKE_HOME_DIRECTORY}/generate/cmake/displayServer.cmake )


###  Choose the low level graphic API  #################################################################################################

include( ${CMAKE_HOME_DIRECTORY}/generate/cmake/git.cmake )


###  Find our dependences  #############################################################################################################

include( ${CMAKE_HOME_DIRECTORY}/generate/cmake/find.cmake )


###  Compiler Options  #################################################################################################################

include( ${CMAKE_HOME_DIRECTORY}/generate/cmake/compiler.cmake )

# Automatically testing if we need to run generate.sh
include( ${CMAKE_HOME_DIRECTORY}/generate/cmake/testSources.cmake )
testSources()



# Generate defines.hpp
configure_file(
 "${CMAKE_HOME_DIRECTORY}/src/defines.in.hpp"
 "${CMAKE_HOME_DIRECTORY}/src/defines.hpp"
)






########################################################################################
############################################################################################################################
#####                     ###########################################################################################################
###  Now build and install  ############################################################################################################
#####                     ###########################################################################################################
############################################################################################################################
########################################################################################

# Include these directories by default (so you can use #include<lib.hpp> without path)
include_directories(
 ${Boost_INCLUDE_DIRS}
 ${GLEW_INCLUDE_DIRS}
 ${OPENGL_INCLUDE_DIR}
 ${X11_INCLUDE_DIRS}
 ${X11_Xrandr_INCLUDE_PATH}
)

# Get ENGINE_SRC and ENGINE_INC (automatically generated by gen_sources.sh)
include(sources.cmake)

if( NOT DEFINED ENGINE_BUILD_SHARED )
   set( ENGINE_BUILD_SHARED 1 )          # DEFAULT: We create a shared library ( .so or a .dll )
endif( NOT DEFINED ENGINE_BUILD_SHARED )

if( ENGINE_BUILD_SHARED )
   add_library( ${PROJECT_NAME} SHARED ${ENGINE_SRC} ) # Create the shared library
else( ENGINE_BUILD_SHARED )
   add_library( ${PROJECT_NAME} STATIC ${ENGINE_SRC} ) # Create the static library
endif( ENGINE_BUILD_SHARED )

# Windows also needs some linking...
if( WIN32 AND ENGINE_BUILD_SHARED )
   target_link_libraries( ${PROJECT_NAME} ${ENGINE_LINK} )
endif( WIN32 AND ENGINE_BUILD_SHARED )

# Set some variables so that Cmake can do some fancy stuff with versions and filenames
set_target_properties(
 ${PROJECT_NAME}
 PROPERTIES
  VERSION   ${CM_VERSION_MAJOR}.${CM_VERSION_MINOR}
  SOVERSION ${CM_VERSION_MAJOR}
)

# Now build the tests
add_subdirectory(${PROJECT_SOURCE_DIR}/tests/)

# Also install some usefull cmakefiles
set(DEPENDENCES ${PROJECT_SOURCE_DIR}/generate/cmake/FindEngine.cmake
                ${PROJECT_SOURCE_DIR}/generate/cmake/FindGLEW2.cmake)

# The install configuaration
install( FILES ${ENGINE_INC}      DESTINATION ${CMAKE_INSTALL_PREFIX}/include/engine)
install( FILES ${DEPENDENCES}     DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/engine)
install( 
 TARGETS ${PROJECT_NAME}
 RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/bin/
 LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/ 
 ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/
)




# Print some stuff
if( ENGINE_VERBOSE )
   message( STATUS "" )
   message( STATUS "" )
   message( STATUS "" )
   message( STATUS "    LIBRARIES" )
   message( STATUS "    =========" )
   message( STATUS "" )
   message( STATUS "GLEW libraries:     ${GLEW_LIBRARIES}" )
   message( STATUS "OpenGL libraries:   ${OPENGL_LIBRARIES}" )
   message( STATUS "X11 libraries:      ${X11_LIBRARIES}" )
   message( STATUS "RandR (X11):        ${X11_Xrandr_LIB}" )
   message( STATUS "Threads:            ${CMAKE_THREAD_LIBS_INIT}" )
   message( STATUS "Boost:              ${Boost_LIBRARIES}" )
   message( STATUS "Boost include:      ${Boost_INCLUDE_DIRS}" )
   message( STATUS "" )
   message( STATUS "" )
   message( STATUS "      ETC" )
   message( STATUS "      ===" )
   message( STATUS "" )
   message( STATUS "GIT commit:         ${CM_VERSION_GIT}" )
   message( STATUS "" )
   message( STATUS "Compiler (ID):      ${CMAKE_CXX_COMPILER_ID}" )
   message( STATUS "Compiler (Exec):    ${CMAKE_CXX_COMPILER}" )
   message( STATUS "Compiler (Version): ${ENGINE_COMPILER_VERSION}" )
   message( STATUS "Options:" )
   message( STATUS "  - DEBUG:          ${CMAKE_CXX_FLAGS_DEBUG}" )
   message( STATUS "  - RELEASE:        ${CMAKE_CXX_FLAGS_RELEASE}" )
   message( STATUS "" )
   message( STATUS "" )
endif( ENGINE_VERBOSE )
