
#     _____      _           _ _                        _
#    |  __ \    | |         (_) |                      (_)
#    | |  \/ ___| |_    __ _ _| |_  __   _____ _ __ ___ _  ___  _ __
#    | | __ / _ \ __|  / _` | | __| \ \ / / _ \ '__/ __| |/ _ \| '_ \
#    | |_\ \  __/ |_  | (_| | | |_   \ V /  __/ |  \__ \ | (_) | | | |
#     \____/\___|\__|  \__, |_|\__|   \_/ \___|_|  |___/_|\___/|_| |_|
#                       __/ |
#                      |___/


set( CM_VERSION_GIT "GIT_FAILED" )

# Set the version of this project
set( CM_VERSION_MAJOR    0 )
set( CM_VERSION_MINOR    0 )
set( CM_VERSION_SUBMINOR 0 )
set( CM_TAG_DIFF         0 )

execute_process(
   COMMAND which git
   OUTPUT_VARIABLE GIT_EXECUTABLE
   RESULT_VARIABLE GIT_FOUND
)

# Git functionality is not provided under Windows (yet)
if( ${GIT_FOUND} MATCHES 0 AND NOT WIN32)
   # Remove newlines added by Git
   string( REGEX REPLACE "\n" "" GIT_EXECUTABLE ${GIT_EXECUTABLE} )

   execute_process(
      COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
      OUTPUT_VARIABLE CM_VERSION_GIT
      WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
      RESULT_VARIABLE GIT_RESULT
   )

   # Remove newlines added by Git
   string( REGEX REPLACE "\n" "" CM_VERSION_GIT ${CM_VERSION_GIT} )

   execute_process(
      COMMAND ${GIT_EXECUTABLE} describe --abbrev=0 --tags
      OUTPUT_VARIABLE GIT_TAG_1
      WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
   )

   execute_process(
      COMMAND ${GIT_EXECUTABLE} describe --tags
      OUTPUT_VARIABLE GIT_TAG_2
      WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
      RESULT_VARIABLE GIT_HAS_TAGS
   )

   if( ${GIT_HAS_TAGS} EQUAL 0 )
      string( REGEX REPLACE "\n" "" GIT_TAG_1 "${GIT_TAG_1}" )
      string( REGEX REPLACE "\n" "" GIT_TAG_2 "${GIT_TAG_2}" )

      string( REGEX REPLACE "^v([0-9]+)[\\.0-9]+$" "\\1" CM_VERSION_MAJOR "${GIT_TAG_1}" )
      string( REGEX REPLACE "^v[\\.0-9]+([0-9]+)[\\.0-9]+$" "\\1" CM_VERSION_MINOR "${GIT_TAG_1}" )
      string( REGEX REPLACE "^v[\\.0-9]+([0-9]+)$" "\\1" CM_VERSION_SUBMINOR "${GIT_TAG_1}" )

      if( "${GIT_TAG_1}" STREQUAL "${GIT_TAG_2}" )
         set( CM_TAG_DIFF 0 )
         message( STATUS "VERSION: ${GIT_TAG_1} [RELEASE] ${CM_VERSION_GIT}" )
      else()
         string( REGEX REPLACE "^v[\\.0-9]+\\-([0-9]*)\\-[a-z0-9]*$" "\\1" CM_TAG_DIFF "${GIT_TAG_2}" )
         message( STATUS "VERSION: ${GIT_TAG_1} +${CM_TAG_DIFF} ${CM_VERSION_GIT}" )
      endif( "${GIT_TAG_1}" STREQUAL "${GIT_TAG_2}" )
   else( ${GIT_HAS_TAGS} EQUAL 0 )
      message( STATUS "Can not access tags ==> version is v0.0.1 +1" )
      set( CM_VERSION_MAJOR    0 )
      set( CM_VERSION_MINOR    0 )
      set( CM_VERSION_SUBMINOR 1 )
      set( CM_TAG_DIFF         1 )
   endif( ${GIT_HAS_TAGS} EQUAL 0 )

endif( ${GIT_FOUND} MATCHES 0 AND NOT WIN32)


# Only set CMAKE_BUILD_TYPE when not defined
if( NOT CMAKE_BUILD_TYPE )
   set( CMAKE_BUILD_TYPE DEBUG )

   # Is this tagged ==> Release?
   if( "${CM_TAG_DIFF}" STREQUAL "0" )
      set( CMAKE_BUILD_TYPE RELEASE )
   endif( "${CM_TAG_DIFF}" STREQUAL "0" )
endif( NOT CMAKE_BUILD_TYPE )

message( STATUS "Build type: ${CMAKE_BUILD_TYPE}" )

set( DEBUG_LOGGING 0 )

if( ENGINE_VERBOSE OR "${CMAKE_BUILD_TYPE}" MATCHES "DEBUG" )
   set( DEBUG_LOGGING 1 )
endif( ENGINE_VERBOSE OR "${CMAKE_BUILD_TYPE}" MATCHES "DEBUG" )
