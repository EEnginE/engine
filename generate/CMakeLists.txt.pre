
# START uninstall
configure_file("${PROJECT_SOURCE_DIR}/generate/cmake/cmake_uninstall.cmake.in"
               "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
               IMMEDIATE @ONLY)

add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)
# STOP uninstall

set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/generate/cmake )


#set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)


########################################################################################
############################################################################################################################
#####                    ############################################################################################################
###  Find our dependences  #############################################################################################################
#####                    ############################################################################################################
############################################################################################################################
########################################################################################

if( NOT DEFINED GLEW_ROOT )
   set( GLEW_ROOT ${CMAKE_HOME_DIRECTORY}/GLEW )
   if( NOT DEFINED GLEW_USE_DEFAULT )
      set( GLEW_NO_DEFAULT 1 )
   endif( NOT DEFINED GLEW_USE_DEFAULT )
endif( NOT DEFINED GLEW_ROOT )

if( NOT DEFINED ENGINE_LINK_SHARED )
   set( ENGINE_LINK_SHARED 1 )   # DEFAULT: link shared (.so / .dll)
endif( NOT DEFINED ENGINE_LINK_SHARED )

# Begin STATIC ###
if( ENGINE_LINK_SHARED )
   message( STATUS "Do not change CMAKE_FIND_LIBRARY_SUFFIXES ( ${CMAKE_FIND_LIBRARY_SUFFIXES} )" )
else( ENGINE_LINK_SHARED )
   set( OLD_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
   if( WIN32 )
      set( CMAKE_FIND_LIBRARY_SUFFIXES .a .lib .dll ${CMAKE_FIND_LIBRARY_SUFFIXES} )
   else( WIN32 )
      set( CMAKE_FIND_LIBRARY_SUFFIXES .a .so ${CMAKE_FIND_LIBRARY_SUFFIXES} )
   endif( WIN32 )
   message( STATUS "Changed CMAKE_FIND_LIBRARY_SUFFIXES for static linking ( ${CMAKE_FIND_LIBRARY_SUFFIXES} )" )
endif( ENGINE_LINK_SHARED )
# End STATIC ###


set(Boost_USE_MULTITHREADED ON)
if( NOT ENGINE_LINK_SHARED )
   set(Boost_USE_STATIC_LIBS ON)
endif( NOT ENGINE_LINK_SHARED )

find_package(GLEW2   REQUIRED) # The orginal FindGLEW.cmake has no options to set a Root path
find_package(OpenGL  REQUIRED)
find_package(Threads REQUIRED)

if( WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES GNU )
   find_package(Boost 1.48.0 REQUIRED COMPONENTS system regex thread_win32 chrono filesystem )
else()
   find_package(X11   REQUIRED)
   find_package(Boost 1.48.0 REQUIRED COMPONENTS system regex thread chrono filesystem )
endif( WIN32 AND CMAKE_CXX_COMPILER_ID MATCHES GNU )


set(ENGINE_LINK 
   ${Boost_LIBRARIES}
   ${GLEW_LIBRARIES}
   ${OPENGL_LIBRARIES}
   ${X11_LIBRARIES}
   ${X11_Xrandr_LIB}
   ${CMAKE_THREAD_LIBS_INIT}
)

# Include these directories by default (so you can use #include<lib.hpp> without path)
include_directories(
 ${Boost_INCLUDE_DIRS}
 ${GLEW_INCLUDE_DIRS}
 ${OPENGL_INCLUDE_DIR}
 ${X11_INCLUDE_DIRS}
 ${X11_Xrandr_INCLUDE_PATH}
 ${PROJECT_SOURCE_DIR}
)



########################################################################################
############################################################################################################################
#####                ################################################################################################################
###  Compiler Options  #################################################################################################################
#####                ################################################################################################################
############################################################################################################################
########################################################################################


if( NOT ENGINE_LINK_SHARED )
   set( PROJECT_DEFINES_GCC   "-DGLEW_STATIC" )
   set( PROJECT_DEFINES_CLANG "-DGLEW_STATIC" )
   set( PROJECT_DEFINES_INTEL "<insert here>" ) # TODO
   set( PROJECT_DEFINES_MSVC  "<insert here>" ) # TODO
endif( NOT ENGINE_LINK_SHARED )

if( LOG_FALLBACK )
  set( PROJECT_DEFINES_GCC   "${PROJECT_DEFINES_GCC}   -DLOG_FALLBACK" )
  set( PROJECT_DEFINES_CLANG "${PROJECT_DEFINES_CLANG} -DLOG_FALLBACK" )
  set( PROJECT_DEFINES_INTEL "${PROJECT_DEFINES_INTEL} <insert here>"  ) # TODO
  set( PROJECT_DEFINES_MSVC  "${PROJECT_DEFINES_MSVC}  <insert here>"  ) # TODO
endif( LOG_FALLBACK )

if( ENGINE_VERBOSE )
   set( GCC_VERBOSE   "--verbose" )
   set( CLANG_VERBOSE "-v" )
   set( INTEL_VERBOSE "<verbose flag>" ) # TODO
   set( MSVC_VERBOSE  "<verbose flag>" ) # TODO
endif( ENGINE_VERBOSE )


set( ENGINE_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION} )



# Options GCC

# CMAKE_CXX_COMPILER_VERSION doesent work always defined, so this is needed
if( CMAKE_CXX_COMPILER_ID MATCHES GNU )
   if( NOT DEFINED CMAKE_CXX_COMPILER_VERSION )
      execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_COMPILER_VERSION)
   else( NOT DEFINED CMAKE_CXX_COMPILER_VERSION )
      set( GCC_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION} )
   endif( NOT DEFINED CMAKE_CXX_COMPILER_VERSION )
   
   set( ENGINE_COMPILER_VERSION ${GCC_COMPILER_VERSION} )
endif( CMAKE_CXX_COMPILER_ID MATCHES GNU )

set( GCC_ENABLE_CXX_11 "-std=c++11" )
if( CMAKE_CXX_COMPILER_ID MATCHES GNU AND GCC_COMPILER_VERSION LESS 4.7 )
   if( GCC_COMPILER_VERSION LESS 4.7 )
      message( FATAL_ERROR "Your GCC compiler version is to old! You need at least GCC v4.7" )
   endif( GCC_COMPILER_VERSION LESS 4.7 )
   set( GCC_ENABLE_CXX_11 "-std=c++0x" )
endif( CMAKE_CXX_COMPILER_ID MATCHES GNU AND GCC_COMPILER_VERSION LESS 4.7 )

set( GNU_COMPILER_OPTIONS_DEBUG   "-Wall ${GCC_ENABLE_CXX_11} ${PROJECT_DEFINES_GCC} ${GCC_VERBOSE}" )
set( GNU_COMPILER_OPTIONS_RELEASE "-Wall ${GCC_ENABLE_CXX_11} ${PROJECT_DEFINES_GCC} ${GCC_VERBOSE} -O3" )

if( EXTRA_WARNINGS )
   set( GNU_COMPILER_OPTIONS_DEBUG   "-Winline -Werror ${GNU_COMPILER_OPTIONS_DEBUG}" )
   set( GNU_COMPILER_OPTIONS_RELEASE "-Winline -Werror ${GNU_COMPILER_OPTIONS_RELEASE}" )
endif( EXTRA_WARNINGS )




# Options LLVM
set( CLANG_ENABLE_CXX_11 "-std=c++11")

set( CLANG_COMPILER_OPTIONS_DEBUG   "${CLANG_ENABLE_CXX_11} ${PROJECT_DEFINES_CLANG} ${CLANG_VERBOSE}" )
set( CLANG_COMPILER_OPTIONS_RELEASE "${CLANG_ENABLE_CXX_11} ${PROJECT_DEFINES_CLANG} ${CLANG_VERBOSE}" )

if( EXTRA_WARNINGS )
   set( CLANG_COMPILER_OPTIONS_DEBUG   "-Werror -Wthread-safety -ftemplate-backtrace-limit=0 ${CLANG_COMPILER_OPTIONS_DEBUG}" )
   set( CLANG_COMPILER_OPTIONS_RELEASE "-Werror -Wthread-safety -ftemplate-backtrace-limit=0 ${CLANG_COMPILER_OPTIONS_RELEASE}" )
endif( EXTRA_WARNINGS )





# Options ICC  - TODO

set( INTEL_COMPILER_OPTIONS_DEBUG   "<insert here> ${PROJECT_DEFINES_INTEL} ${INTEL_VERBOSE}" )
set( INTEL_COMPILER_OPTIONS_RELEASE "<insert here> ${PROJECT_DEFINES_INTEL} ${INTEL_VERBOSE}" )

if( EXTRA_WARNINGS )
   set( INTEL_COMPILER_OPTIONS_DEBUG   "<insert here> ${INTEL_COMPILER_OPTIONS_DEBUG}" )
   set( INTEL_COMPILER_OPTIONS_RELEASE "<insert here> ${INTEL_COMPILER_OPTIONS_RELEASE}" )
endif( EXTRA_WARNINGS )




# Options MSVC

set( MSVC_COMPILER_OPTIONS_DEBUG   "/Od ${PROJECT_DEFINES_MSVC} ${MSVC_VERBOSE}" )
set( MSVC_COMPILER_OPTIONS_RELEASE "/O2 ${PROJECT_DEFINES_MSVC} ${MSVC_VERBOSE}" )

if( EXTRA_WARNINGS )
   set( MSVC_COMPILER_OPTIONS_DEBUG   "<insert here> ${MSVC_COMPILER_OPTIONS_DEBUG}" )
   set( MSVC_COMPILER_OPTIONS_RELEASE "<insert here> ${MSVC_COMPILER_OPTIONS_RELEASE}" )
endif( EXTRA_WARNINGS )






# Detect Compiler

if( CMAKE_CXX_COMPILER_ID MATCHES GNU )
   set( CMAKE_CXX_FLAGS_DEBUG   "${EXTRA_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}   ${GNU_COMPILER_OPTIONS_DEBUG}" )
   set( CMAKE_CXX_FLAGS_RELEASE "${EXTRA_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} ${GNU_COMPILER_OPTIONS_RELEASE}" )

elseif( CMAKE_CXX_COMPILER_ID MATCHES Clang )
   set( CMAKE_CXX_FLAGS_DEBUG   "${EXTRA_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}   ${CLANG_COMPILER_OPTIONS_DEBUG}" )
   set( CMAKE_CXX_FLAGS_RELEASE "${EXTRA_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} ${CLANG_COMPILER_OPTIONS_RELEASE}" ) 

elseif( CMAKE_CXX_COMPILER_ID MATCHES Intel )
   #set( CMAKE_CXX_FLAGS_DEBUG   "${EXTRA_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}   ${INTEL_COMPILER_OPTIONS_DEBUG}" )   # Uncomment this when done with Intel
   #set( CMAKE_CXX_FLAGS_RELEASE "${EXTRA_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} ${INTEL_COMPILER_OPTIONS_RELEASE}" ) # Uncomment this when done with Intel
   message( WARNING "Compiler flags for ${CMAKE_CXX_COMPILER_ID} not (yet) supported" )           # Remove this when done with Intel

elseif( CMAKE_CXX_COMPILER_ID MATCHES MSVC )
   set( CMAKE_CXX_FLAGS_DEBUG   "${EXTRA_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}   ${MSVC_COMPILER_OPTIONS_DEBUG}" )
   set( CMAKE_CXX_FLAGS_RELEASE "${EXTRA_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE} ${MSVC_COMPILER_OPTIONS_RELEASE}" )

else()
   message( WARNING "Unknown compiler ${CMAKE_CXX_COMPILER_ID}" )
endif()





########################################################################################
############################################################################################################################
#####                        ########################################################################################################
###  Get the Version form git  #############################################################################################################
#####                        ########################################################################################################
############################################################################################################################
########################################################################################


set( CM_VERSION_GIT "GIT_FAILED" )

# Set here the Version of this project
set( CM_VERSION_MAJOR    0 )
set( CM_VERSION_MINOR    0 )
set( CM_VERSION_SUBMINOR 0 )
set( CM_COMMIT_IS_TAGGED 0 )

execute_process( 
   COMMAND which git
   OUTPUT_VARIABLE GIT_EXECUTABLE
   RESULT_VARIABLE GIT_FOUND
)
         
if( ${GIT_FOUND} MATCHES 0 )
   # which adds a newline (what is bad)
   string( REGEX REPLACE "\n" "" GIT_EXECUTABLE ${GIT_EXECUTABLE} )

   execute_process( 
      COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
      OUTPUT_VARIABLE CM_VERSION_GIT
      WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
      RESULT_VARIABLE GIT_RESULT
   )
     
   # git adds a newline (what is bad)
   string( REGEX REPLACE "\n" "" CM_VERSION_GIT ${CM_VERSION_GIT} )
   
   execute_process( 
      COMMAND ${GIT_EXECUTABLE} describe --abbrev=0 --tags
      OUTPUT_VARIABLE GIT_TAG_1
      WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
   )
      
   execute_process( 
      COMMAND ${GIT_EXECUTABLE} describe --tags
      OUTPUT_VARIABLE GIT_TAG_2
      WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}
   )
      
   string( REGEX REPLACE "\n" "" GIT_TAG_1 ${GIT_TAG_1} )
   string( REGEX REPLACE "\n" "" GIT_TAG_2 ${GIT_TAG_2} )
      
   string( REGEX REPLACE "^v([0-9]+)[\\.0-9]+$" "\\1" CM_VERSION_MAJOR ${GIT_TAG_1} )
   string( REGEX REPLACE "^v[\\.0-9]+([0-9]+)[\\.0-9]+$" "\\1" CM_VERSION_MINOR ${GIT_TAG_1} )
   string( REGEX REPLACE "^v[\\.0-9]+([0-9]+)$" "\\1" CM_VERSION_SUBMINOR ${GIT_TAG_1} )
         
   if( ${GIT_TAG_1} STREQUAL ${GIT_TAG_2} )
      set( CM_COMMIT_IS_TAGGED 1 )
      message( STATUS "VERSION: ${GIT_TAG_1} [RELEASE] ${CM_VERSION_GIT}" )
   else()
      message( STATUS "VERSION: ${GIT_TAG_1} +GIT ${CM_VERSION_GIT}" )
   endif( ${GIT_TAG_1} STREQUAL ${GIT_TAG_2} )
   
endif( ${GIT_FOUND} MATCHES 0 )


# Only set CMAKE_BUILD_TYPE when not defined
if( NOT CMAKE_BUILD_TYPE )
   set( CMAKE_BUILD_TYPE DEBUG )

   # Is this tagged ==> Release?
   if( "${CM_COMMIT_IS_TAGGED}" MATCHES "1" )
      set( CMAKE_BUILD_TYPE RELEASE )
   endif( "${CM_COMMIT_IS_TAGGED}" MATCHES "1" )
endif( NOT CMAKE_BUILD_TYPE )

message( STATUS "Build type: ${CMAKE_BUILD_TYPE}" )

set( DEBUG_LOGGING 0 )

if( ENGINE_VERBOSE OR "${CMAKE_BUILD_TYPE}" MATCHES "DEBUG" )
   set( DEBUG_LOGGING 1 )
endif( ENGINE_VERBOSE OR "${CMAKE_BUILD_TYPE}" MATCHES "DEBUG" )

