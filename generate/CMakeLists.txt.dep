

#    ______                          _
#    |  _  \                        | |
#    | | | |___ _ __   ___ _ __   __| | ___ _ __   ___ ___  ___
#    | | | / _ \ '_ \ / _ \ '_ \ / _` |/ _ \ '_ \ / __/ _ \/ __|
#    | |/ /  __/ |_) |  __/ | | | (_| |  __/ | | | (_|  __/\__ \
#    |___/ \___| .__/ \___|_| |_|\__,_|\___|_| |_|\___\___||___/
#              | |
#              |_|

# Begin STATIC ###
if( ENGINE_LINK_SHARED )
   message( STATUS "Do not change CMAKE_FIND_LIBRARY_SUFFIXES ( ${CMAKE_FIND_LIBRARY_SUFFIXES} )" )
else( ENGINE_LINK_SHARED )
   set( OLD_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES} )
   if( WIN32 )
      set( CMAKE_FIND_LIBRARY_SUFFIXES .a .lib .dll ${CMAKE_FIND_LIBRARY_SUFFIXES} )
   else( WIN32 )
      set( CMAKE_FIND_LIBRARY_SUFFIXES .a .so ${CMAKE_FIND_LIBRARY_SUFFIXES} )
   endif( WIN32 )
   message( STATUS "Changed CMAKE_FIND_LIBRARY_SUFFIXES for static linking ( ${CMAKE_FIND_LIBRARY_SUFFIXES} )" )
endif( ENGINE_LINK_SHARED )
# End STATIC ###

if( ENGINE_USE_BOOST )
   set(Boost_USE_MULTITHREADED ON)
   if( NOT ENGINE_LINK_SHARED )
      set(Boost_USE_STATIC_LIBS ON)
   endif( NOT ENGINE_LINK_SHARED )
   find_package(Boost 1.46.1 REQUIRED COMPONENTS filesystem system )

   set( CM_FILESYSTEM_NAMESPACE "boost::filesystem" )
   set( CM_FILESYSTEM_INCLUDE   "<boost/filesystem.hpp>" )
else( ENGINE_USE_BOOST )
   if( STD_FILESYSTEM_IS_EXPERIMENTAL )
      set( CM_FILESYSTEM_NAMESPACE "std::experimental::filesystem" )
	  set( CM_FILESYSTEM_INCLUDE   "<experimental/filesystem>" )
   else( STD_FILESYSTEM_IS_EXPERIMENTAL )
      set( CM_FILESYSTEM_NAMESPACE "std::filesystem" )
	  set( CM_FILESYSTEM_INCLUDE   "<filesystem>" )
   endif( STD_FILESYSTEM_IS_EXPERIMENTAL )
endif( ENGINE_USE_BOOST )


find_package(OpenGL       REQUIRED)
find_package(Threads      REQUIRED)

if( USE_SYSTEM_GLEW )
   find_package(GLEW REQUIRED)
else( USE_SYSTEM_GLEW )
   if( ENGINE_LINK_SHARED )
      set( GLEW_LIBRARIES glew )
   else( ENGINE_LINK_SHARED )
      set( GLEW_LIBRARIES glew_s )
   endif( ENGINE_LINK_SHARED )

   set( GLEW_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/dependencies/GLEW/include )
endif( USE_SYSTEM_GLEW )

if( CM_UNIX_X11 )
   find_package(X11 REQUIRED)

   if( X11_Xrandr_FOUND )
      message( STATUS "Found Xrandr" )
   else( X11_Xrandr_FOUND )
      message( SEND_ERROR "Xrandr NOT FOUND!" )
   endif( X11_Xrandr_FOUND )
endif( CM_UNIX_X11 )

add_subdirectory( dependencies )

set(ENGINE_LINK
   ${Boost_LIBRARIES}
   ${GLEW_LIBRARIES}
   ${OPENGL_LIBRARIES}
   ${X11_LIBRARIES}
   ${X11_Xrandr_LIB}
   ${CMAKE_THREAD_LIBS_INIT}
)

# Include these directories by default (so you can use #include<lib.hpp> without path)
include_directories(
 ${Boost_INCLUDE_DIRS}
 ${GLEW_INCLUDE_DIRS}
 ${OPENGL_INCLUDE_DIR}
 ${X11_INCLUDE_DIRS}
 ${X11_Xrandr_INCLUDE_PATH}
 ${PROJECT_SOURCE_DIR}
)
