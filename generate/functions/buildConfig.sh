#!/usr/bin/env bash

# Copyright (C) 2015 EEnginE project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

BUILD_VARS=(
   "CMAKE_EXECUTABLE; Path to the CMake executable"
   "BUILD_COMMAND; Path to the build system (make, ninja, etc.)"
   "BUILD_DIR; Name of the build directory"
   "MAKEFILE_NAME; 'Makefile' generated by CMake"
   "CMAKE_FLAGS; Additional CMake flags"
   "CMAKE_GENERATOR; Sets the CMake generator for the build system"
   "FORCE_CMAKE; Alway run CMake (boolean: 1 - true / 0 - false)"
   "CPP_COMPILER; Set a specific CPP compiler"
   "C_COMPILER; Set a specific C compiler"
   "INST_PREFIX; The install prefix (for -DCMAKE_INSTALL_PREFIX)"
   "BUILD_FLAGS; arguments for the build system (e.g. make)"
)

setBuildDefaultVars() {
   CMAKE_EXECUTABLE="$(which cmake)"
   BUILD_COMMAND="$(which make)"
   BUILD_DIR="build"
   MAKEFILE_NAME="Makefile"
   FORCE_CMAKE="0"
}

paresBuildCFG() {
   msg2 "Parsing the build config file ${BUILD_CFG_NAME}"

   if [ ! -f "${BUILD_CFG_NAME}" ]; then
      configureBuild
      writeBuildConfig > "${BUILD_CFG_NAME}"
   fi

   local LINE
   while read LINE; do
      LINE="${LINE/\#*/}" # Remove comments
      LINE="${LINE/$*( )/}" # Remove ' ' at the end of line ( Needs shopt extglob on )

      if [ -z "$LINE" ]; then
           continue
      fi

      local TEMP="${LINE/#*:*( )/}" # Needs shopt extglob on
      local VARIABLE="${LINE/%:*/}"
      local found=0

      for i in "${BUILD_VARS[@]}"; do
         VAR_NAME="${i/%;*/}"

         if [[ "$VAR_NAME" == "$VARIABLE" ]]; then
            eval "${VAR_NAME}=\"${TEMP}\""
            found=1
            break
         fi
      done

      (( found == 0 )) && warning "Unknown option '$VARIABLE' with argumet(s) $TEMP"

   done < "${BUILD_CFG_NAME}"
}

writeBuildConfig() {
   cat << EOF
# Build config file. (generate.sh b)
#
# NOTE: ALL commands are optional
#
# SYNTAX:
#  - Comments: Start with a '#'
#  - Commands: <Command name>:<ARGS>

EOF

   local i VAR_NAME DESC
   for i in "${BUILD_VARS[@]}"; do
      VAR_NAME="${i/%;*/}"
      DESC="${i/#*;/}"
      VAR_CONTENT="${!VAR_NAME}"

      if [ -z "$VAR_NAME" -o -z "$DESC" ]; then
         error "[writeBuildConfig] Internal script error ==> continue" >&2
         continue
      fi

      if [ -z "$VAR_CONTENT" ]; then
         echo -e "# $DESC"
         echo -e "# ${VAR_NAME}:\n"
      else
         echo -e "# $DESC"
         echo -e "${VAR_NAME}: ${VAR_CONTENT}\n"
      fi
   done

   echo -e "\n\n"
}

configureBuild() {
   msg2 "Configuring build options"
   if [ -f "${BUILD_CFG_NAME}" ]; then paresBuildCFG; else setBuildDefaultVars; fi

   local i VAR_NAME DESC VAR_CONTENT input doContinue

   while true; do
      for i in "${BUILD_VARS[@]}"; do
         VAR_NAME="${i/%;*/}"
         DESC="${i/#*;/}"
         VAR_CONTENT="${!VAR_NAME}"

         ask "$VAR_NAME: $DESC" "$VAR_CONTENT" "$VAR_NAME"
         eval "${VAR_NAME}=\"\${${VAR_NAME}##*( )}\""
         eval "${VAR_NAME}=\"\${${VAR_NAME}%%*( )}\""
      done

      writeBuildConfig
      doContinue=0

      while true; do
         ask "Is this config OK? (Y/N/A)" "Y" input
         case "$input" in
            A) return   ;;
            N) doContinue=1; break;;
            Y) break ;;
            *) warning "Only Y (Yes), N (No), A (Abbort)" ;;
         esac
      done

      (( doContinue == 1 )) && continue

      writeBuildConfig > "${BUILD_CFG_NAME}"

      return
   done
}
